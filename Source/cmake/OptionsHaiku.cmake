SET(PROJECT_VERSION_MAJOR 1)
SET(PROJECT_VERSION_MINOR 4)
SET(PROJECT_VERSION_PATCH 3)
SET(PROJECT_VERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH})

add_definitions(-DHAIKU_WEBKIT_VERSION=\"${PROJECT_VERSION}\")
add_definitions(-DBUILDING_HAIKU__=1)

# Force libstdc++ to export std::isinf and friends. This should be fixed on
# Haiku side ultimately.
add_definitions(-D_GLIBCXX_USE_C99_MATH)

if (NOT DEFINED ENABLE_WEBKIT2)
    set(ENABLE_WEBKIT2 OFF)
endif ()

if ("${CMAKE_BUILD_TYPE}" STREQUAL "debug" AND NOT SHARED_CORE)
    message(FATAL_ERROR "Turn on the SHARED_CORE flag to make a debug build - e.g.\n build-webkit --haiku --debug --cmakeargs=\"-DSHARED_CORE=ON\".\n")
endif ()
#ADD_DEFINITIONS(-UNDEBUG) # Uncomment this to get assertions in release mode.

FIND_PACKAGE(Sqlite REQUIRED)
FIND_PACKAGE(LibXml2 2.8.0 REQUIRED)
FIND_PACKAGE(LibXslt 1.1.7 REQUIRED)
FIND_PACKAGE(ICU REQUIRED)
find_package(Threads REQUIRED)
FIND_PACKAGE(JPEG REQUIRED)
FIND_PACKAGE(PNG REQUIRED)
FIND_PACKAGE(ZLIB REQUIRED)

set(WTF_USE_UDIS86 1)

add_definitions(-DWTF_USE_CROSS_PLATFORM_CONTEXT_MENUS=1)
add_definitions(-DWTF_USE_PTHREADS=1)
add_definitions(-DWTF_USE_ICU_UNICODE=1)

set(DATA_INSTALL_DIR "data/WebKit" CACHE PATH "Installation path for data")
add_definitions(-DDATA_DIR="${CMAKE_INSTALL_PREFIX}/${DATA_INSTALL_DIR}")

WEBKIT_OPTION_BEGIN()
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_3D_RENDERING ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_ACCESSIBILITY OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_API_TESTS OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_BATTERY_STATUS OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_CSS3_TEXT ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_CSS_DEVICE_ADAPTATION ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_CSS_FILTERS ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_CSS_GRID_LAYOUT OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_CSS_IMAGE_SET ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_CSS_REGIONS ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_CUSTOM_SCHEME_HANDLER OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_DATALIST_ELEMENT OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_DOM4_EVENTS_CONSTRUCTOR ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_DOWNLOAD_ATTRIBUTE ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_DRAG_SUPPORT ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_ENCRYPTED_MEDIA OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_ENCRYPTED_MEDIA_V2 OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_FILTERS ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_FULLSCREEN_API OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_GAMEPAD OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_GAMEPAD_DEPRECATED OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_INDEXED_DATABASE OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_INDEXED_DATABASE_IN_WORKERS OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_INPUT_TYPE_COLOR OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_LINK_PREFETCH OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_MEDIA_CAPTURE OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_MEDIA_CONTROLS_SCRIPT ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_MEMORY_SAMPLER ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_MHTML ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_MOUSE_CURSOR_SCALE OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_NAVIGATOR_CONTENT_UTILS OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_NAVIGATOR_HWCONCURRENCY ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_NETSCAPE_PLUGIN_API OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_NETWORK_PROCESS OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_NOSNIFF ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_RESOLUTION_MEDIA_QUERY ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_REQUEST_ANIMATION_FRAME ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_SECCOMP_FILTERS OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_SHARED_WORKERS OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_SPELLCHECK OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_TEMPLATE_ELEMENT ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_TOUCH_EVENTS OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_TOUCH_SLIDER OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_USERSELECT_ALL ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_VIBRATION OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_VIDEO ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_VIDEO_TRACK OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_VIEW_MODE_CSS_MEDIA ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_WEB_AUDIO ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_WEB_TIMING ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_WEBGL OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_XHR_TIMEOUT ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(WTF_USE_TILED_BACKING_STORE OFF)

if (ENABLE_LLINT_C_LOOP)
    message(STATUS "Force enabling LLINT C LOOP.")
    WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_JIT OFF)
    WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_DFG_JIT OFF)
    WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_FTL_JIT OFF)
endif ()

WEBKIT_OPTION_END()

if (ENABLE_WEBKIT2 AND ENABLE_NETSCAPE_PLUGIN_API)
    set(ENABLE_PLUGIN_PROCESS 1)
endif ()

if (ENABLE_BATTERY_STATUS)
    find_package(DBus REQUIRED)
endif ()

IF (ENABLE_WEB_AUDIO)
    SET(WTF_USE_FFMPEG 1)
    ADD_DEFINITIONS(-DWTF_USE_FFMPEG=1)
    ADD_DEFINITIONS(-DWTF_USE_WEBAUDIO_FFMPEG=1)
ENDIF ()

set(WTF_USE_3D_GRAPHICS 0)
add_definitions(-DWTF_USE_3D_GRAPHICS=0)

if (ENABLE_WEBGL)
    find_package(OpenGL REQUIRED)
    CHECK_INCLUDE_FILES("GL/glx.h" OPENGLX_FOUND)

    if (OPENGLX_FOUND)
        add_definitions(-DHAVE_GLX)
    endif ()

    option(ENABLE_EGL ON)

    if (ENABLE_EGL)
        find_package(EGL REQUIRED)
    endif ()

    if (EGL_FOUND)
        set(WTF_USE_EGL 1)
        add_definitions(-DWTF_USE_EGL=1)
        option(ENABLE_GLES2 ON)

        if (ENABLE_GLES2)
            find_package(GLES REQUIRED)
        endif ()

        if (OPENGLES2_FOUND)
            set(WTF_USE_OPENGL_ES_2 1)
            add_definitions(-DWTF_USE_OPENGL_ES_2=1)
        endif ()
     elseif (OPENGLX_FOUND)
         add_definitions(-DWTF_USE_GLX=1)
    endif ()

     if ((OPENGLX_FOUND OR EGL_FOUND) AND X11_Xcomposite_FOUND AND X11_Xrender_FOUND)
         set(USE_GRAPHICS_SURFACE 1)
     endif ()
endif ()

if (ENABLE_INSPECTOR)
    set(WEB_INSPECTOR_DIR "${DATA_INSTALL_DIR}/inspector")
    add_definitions(-DWEB_INSPECTOR_DIR=\"${CMAKE_BINARY_DIR}/${WEB_INSPECTOR_DIR}\")
    add_definitions(-DWEB_INSPECTOR_INSTALL_DIR=\"${CMAKE_INSTALL_PREFIX}/${WEB_INSPECTOR_DIR}\")
endif ()

# Packaging data
if(CMAKE_HAIKU_SECONDARY_ARCH)
    # Building for secondary architecture, setup the suffix
    set(PACKAGE_SUFFIX _${CMAKE_HAIKU_SECONDARY_ARCH})
endif()

SET(CPACK_SOURCE_GENERATOR TBZ2)
set(CPACK_GENERATOR HPKG)

# Optimize binary size for release builds by removing dead sections
if (CMAKE_BUILD_TYPE STREQUAL release AND CMAKE_COMPILER_IS_GNUCC)
    set(CMAKE_C_FLAGS "-ffunction-sections -fdata-sections ${CMAKE_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "-ffunction-sections -fdata-sections ${CMAKE_CXX_FLAGS}")
    set(CMAKE_SHARED_LINKER_FLAGS "-Wl,--gc-sections ${CMAKE_SHARED_LINKER_FLAGS}")
endif ()

# Haiku actually make use of rtti in several places, so we can't really disable
# it, unlike on other platforms...
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -frtti")

string(TOLOWER ${CMAKE_HOST_SYSTEM_PROCESSOR} LOWERCASE_CMAKE_HOST_SYSTEM_PROCESSOR)
if (CMAKE_COMPILER_IS_GNUCC AND "${LOWERCASE_CMAKE_HOST_SYSTEM_PROCESSOR}" STREQUAL "x86")
    # i686 is the official requirement for Haiku, let's try to keep this working
    # for everyone. Moreover, our stack isn't 16-byte aligned so this avoid
    # crashes where gcc would otherwise use SSE2 instructions.
    set(CMAKE_C_FLAGS "-march=i686 ${CMAKE_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "-march=i686 ${CMAKE_CXX_FLAGS}")
endif()

set(ENABLE_TEXTURE_MAPPER 1)
set(WTF_USE_TEXTURE_MAPPER 1)
add_definitions(-DWTF_USE_TEXTURE_MAPPER=1)

set(WTF_USE_COORDINATED_GRAPHICS 0)
add_definitions(-DWTF_USE_COORDINATED_GRAPHICS=0)

if (ENABLE_WEBGL)
    set(ENABLE_WEBGL 1)
    if (USE_GRAPHICS_SURFACE)
        add_definitions(-DWTF_USE_GRAPHICS_SURFACE=1)
    endif ()
endif ()

if (ENABLE_SPELLCHECK)
    find_package(Enchant REQUIRED)
endif ()

if (ENABLE_ACCESSIBILITY)
    find_package(ATK REQUIRED)
else ()
    add_definitions(-DHAVE_ACCESSIBILITY=0)
endif ()

if (ENABLE_INDEXED_DATABASE)
    set(WTF_USE_LEVELDB 1)
    add_definitions(-DWTF_USE_LEVELDB=1)
endif ()

set(SHOULD_INSTALL_JS_SHELL ON)

set(WEBKIT_CPACK_ALL_PORTS 1) # Until we can safely extract only the sources used by Haiku
set(WEBKIT_CPACK_ADD_TOOLS 1) # Mainly for generate_webkit_info.sh

set(CPACK_PACKAGE_NAME "haikuwebkit${PACKAGE_SUFFIX}")
set(CPACK_PACKAGE_VENDOR "Haiku Project")
set(CPACK_HAIKU_PACKAGE_COPYRIGHT "1998-2013 Apple Inc., Google Inc., Haiku Inc., et al")
set(CPACK_HAIKU_PACKAGE_LICENSES "GNU LGPL v2" "GNU LGPL v2.1" "MIT")
    # TODO apple webkit (needs to be added inside package)
set(CPACK_HAIKU_PACKAGE_REVISION "1")

set(CPACK_HAIKU_PACKAGE_PROVIDES
    "lib:libWebKit${PACKAGE_SUFFIX} = ${PROJECT_VERSION}"
)
set(CPACK_HAIKU_PACKAGE_REQUIRES
    "haiku${PACKAGE_SUFFIX} >= r1~alpha4_pm-1"
    "icu${PACKAGE_SUFFIX} >= 4.8.1.1"
    "lib:libjpeg${PACKAGE_SUFFIX} >= 9"
    "lib:libpng${PACKAGE_SUFFIX} >= 15.12.0"
    "lib:libsqlite3${PACKAGE_SUFFIX} >= 0.8.6"
    "lib:libxml2${PACKAGE_SUFFIX} >= 2.8.0"
    "lib:libxslt${PACKAGE_SUFFIX} >= 1.1.18"
)

set(CPACK_HAIKU_devel_PACKAGE_PROVIDES
    "devel:libWebKit${PACKAGE_SUFFIX} = ${PROJECT_VERSION}"
)
set(CPACK_HAIKU_devel_PACKAGE_REQUIRES
    "haiku${PACKAGE_SUFFIX}_devel >= r1~alpha4_pm-1"
    "icu${PACKAGE_SUFFIX}_devel >= 4.8.1.1"
    "devel:libjpeg${PACKAGE_SUFFIX} >= 9"
    "devel:libpng${PACKAGE_SUFFIX} >= 15.12.0"
    "devel:libsqlite3${PACKAGE_SUFFIX} >= 0.8.6"
    "devel:libxml2${PACKAGE_SUFFIX} >= 2.8.0"
    "devel:libxslt${PACKAGE_SUFFIX} >= 1.1.18"
)

include(CPackComponent)
cpack_add_component(devel)

# These could be shared with other flavors of CPack, if they are used anywhere.
# Maybe move them to non-Haiku specific place.
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Open source web browser engine")
set(CPACK_PACKAGE_DESCRIPTION "WebKit is an open source web browser engine.
WebKit is also the name of the Mac OS X system framework version of the engine
that's used by Safari, Dashboard, Mail, and many other OS X applications.
WebKit's HTML and JavaScript code began as a branch of the KHTML and KJS
libraries from KDE.")
set(CPACK_PACKAGE_VERSION ${PROJECT_VERSION})
